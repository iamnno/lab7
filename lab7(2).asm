TITLE ЛР_7
;------------------------------------------------------------------------------
;ЛР  №7
;------------------------------------------------------------------------------
; Архітектура комп'ютера.
; ВУЗ:          НТУУ "КПІ"
; Факультет:    ФІОТ
; Курс:         1
; Група:        ІТ-01
;------------------------------------------------------------------------------
; Автор:        Гончаренко, Доброхотова, Нікітченко
; Дата:         06/05/2021
;----------------------------I.ЗАГОЛОВОК ПРОГРАМИ------------------------------
IDEAL			             ; Директива - тип Асемблера tasm 
MODEL small		             ; Директива - тип моделі пам’яті 
STACK 2048		             ; Директива - розмір стеку 
;----------------------------II.ПОЧАТОК СЕГМЕНТУ ДАНИХ-------------------------
DATASEG
;------------------------------------------------------------------------------
null db 13,10, '$'
;------------------------------------------------------------------------------
a1 db -1                     ; Значення, які підставлятимуться в формулу
a2 db 1
a3 db 2
a4 db 2
a5 dw 3
;------------------------------------------------------------------------------
interface_1 db "Menu from team 4",13,10,'$'                ; Меню програми
interface_2 db "Press i to count",13,10,'$'
interface_3 db "Press O to sound",13,10,'$'
interface_4 db "Press p to leave",13,10,'$'
interface_5 db "----------------",13,10,'$'
interface_6 db "Programm  exited",13,10,'$'
;------------------------------------------------------------------------------
FREQUENCY EQU 20
TIME EQU 3500
;------------------------------------------------------------------------------
input_string db 254
;----------------------------ІІІ. ПОЧАТОК СЕГМЕНТУ КОДУ------------------------
CODESEG
;------------------------------------------------------------------------------
PROC calculate               ; Процедура, що обчислює вираз ((a1-a2)*a3*a4+a5), де a1=-1, a2=1, a3=2, a4=2, a5=3, та виводить його на екран
 mov al, [a1]                ; Запис а1 до al
 mov ah, [a2]                ; Запис а2 до bh
 sub al, ah                  ; al - ah, результат в al
 mov ah, [a3]                ; Запис а3 до ah
 imul ah                     ; ah * al, результат в ax
 mov ah, [a4]                ; Запис а4 до bx
 imul ah                     ; ah * al, результат в ax
 mov bx, [a5]                ; Запис а5 до bx
 add ax, bx                  ; ax + bx, результат в ax

 mov bx, ax                  ; Заносимо значення ax до bx
 neg bx                      ; Змінюємо знак в регістрі bx
 cmp ax, bx                  ; Порівнюємо значення в ax та bx
 jb outer                    
minus:
 mov ax, bx                  ; Беремо додатнє значення    
 mov ah, '-'                 ; Запис знака "-"
 jmp outer                   ; Вихід
outer:
 add al, 30h                 ; Для вивіду у ASCII
 mov dl, ah                  ; Занесення значення для виводу
 mov dh, al                  ; Занесення значення для наступного виводу
 mov ah, 02h                 ; Команда виводу байта
 int 21h                     
 mov dl, dh                  ; Виведення наступного значення
 int 21h

 mov ah,09h                  ; Команда виводу рядка  
 lea dx, [null]              ; Виведення пустого рядка
 int 21h

 ret                         ; Повернення з процедури
ENDP calculate               ; Кінець процедури
;------------------------------------------------------------------------------
PROC draw_interface          ; Процедура для виводу меню
 mov ax, 03h                 ; Команда для очищення консолі
 int 10h                     ; Переривання BIOS
 mov ah, 09h                 ; Команда для виводу на екран
 mov dx, offset interface_5
 int 21h
 mov dx, offset interface_1
 int 21h
 mov dx, offset interface_5
 int 21h
 mov dx, offset interface_2
 int 21h
 mov dx, offset interface_3
 int 21h
 mov dx, offset interface_4
 int 21h
 mov dx, offset interface_5
 int 21h

 ret                         ; Повернення з процедури
ENDP draw_interface          ; Кінець процедури
;------------------------------------------------------------------------------
PROC sound
 in al, 61h                  ; Одержуємо стан динаміка
 push ax                     ; Збереження стану динаміка
 or al, 00000011B            ; Зміна стану динаміка на ввімкнений динамік
 out 61h, al                 ; Занесення стану динаміка
 mov al, FREQUENCY           ; Встановлюємо частоту
 out 42h, al                 ; Вмикаємо таймер, який буде подавати імпульси на динамік на вказаній частоті
 call wait_time              ; Викликаємо процедуру очікування
 pop ax                      ; Повертаємо стан динаміка
 and al, 11111100B           ; Зміна стану динаміка на вимкнений динамік
 out 61h, al                 ; Занесення стану динаміка
 
 ret                         ; Повернення з процедури
ENDP sound                   ; Кінець процедури
;------------------------------------------------------------------------------
PROC wait_time               ; Процедура очікування, проходження за двома циклами
 push cx
 mov cx, TIME
loop1:             	  
 push cx	             
 mov cx, TIME
 loop2:
  loop loop2
 pop cx
 loop loop1
 pop cx
 
 ret                         ; Повернення з процедури
ENDP wait_time               ; Кінець процедури
;------------------------------------------------------------------------------
Start:
;------------------------------------------------------------------------------
 mov ax, @data               ; Ініціалізуємо сегмент даних
 mov ds, ax
 mov es, ax
;------------------------------------------------------------------------------
 mov al, 1                   ; Ініціалізуємо таймер
 out 42h, al
;------------------------------------------------------------------------------
 call draw_interface         ; Виводимо меню
;------------------------------------------------------------------------------
ask_cycle:
 mov ah, 08h                 ; Команда для зчитування з клавіатури
 int 21h
 
 cmp al, "i"                 ; Порівняння введеного та i
 je count                    ; Якщо введено i, то вивести результат
 cmp al, "O"                 ; Порівняння введеного та O
 je beep                     ; Якщо введено O, то beep
 cmp al, "p"                 ; Порівняння введеного та p
 je exit                     ; Якщо введено p, то закрити програму
 call draw_interface         ; Якщо нажато не ту клавішу, оновити меню
 jmp ask_cycle               ; Повторюємо головний цикл
count:
 call calculate              ; Запуск процедури обчислення
 jmp ask_cycle               ; Повернення до зчитування
beep:
 call sound                  ; Запуск процедури звуку
 jmp ask_cycle               ; Повернення до зчитування
exit:
 call draw_interface         ; Для оновлення меню до початкового стану
 mov ah, 09h                 ; Команда для виводу на екран
 mov dx, offset interface_6
 int 21h
 mov dx, offset interface_5
 int 21h
 mov ah, 4ch
 int 21h
;------------------------------------------------------------------------------
end Start